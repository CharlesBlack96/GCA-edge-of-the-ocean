# -*- coding: utf-8 -*-
"""GCA edge of the ocean

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VxQD9n2O4smQy23tVmxe00nweyBF5O6Z

Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.

Example

For inputArray = [3, 6, -2, -5, 7, 3], the output should be
solution(inputArray) = 21.

7 and 3 produce the largest product.

Input/Output

[execution time limit] 4 seconds (py3)

[input] array.integer inputArray

An array of integers containing at least two elements.

Guaranteed constraints:
2 ≤ inputArray.length ≤ 10,
-1000 ≤ inputArray[i] ≤ 1000.

[output] integer

The largest product of adjacent elements.
"""

#create a function

#function will check each index and the one to the right of it until the second to last index

#it will multiply each pair together and place each product in a list of products

#it will then return the max value of the product.

#i want to avoid using for loops but instead list comprehension or array computations?
#the best practice for this is to use an array computation

def solution1(inputArray):
  return max([inputArray[i] * inputArray[i+1] for i in range(len(inputArray)-1)])

solution1([3, 6, -2, -5, 7, 3])

solution1([3, 6, -2, -5, 7, 45])

# PASSES TESTS BUT IS IT THE BEST

#FOR LOOPS VS LIST COMPREHENSIONS VS ARRAY COMPUTATIONS

#FOR LOOP
start = time.time()
for i in range(iterations):
    i+1
end = time.time()
print(end - start)
>> 6.16 seconds

#LIST COMPREHENSION
start = time.time()
[i+1 for i in range(iterations)]
end = time.time()
print(end - start)
>> 7.80 seconds

#ARRAY COMPUTATION
start = time.time()
mylist = list(range(iterations))
end = time.time()
print(end - start)
>> 4.84 seconds

inputarray = [3, 6, -2, -5, 7, 3]

inputarray

inputarray[1:]

def solution2(inputArray):
  products = [a*b for a,b in zip(inputArray, inputArray[:1])]
  return max(products)

solution2([3, 6, -2, -5, 7, 3])

def solution3(inputArray):
  return max(a*b for a,b in zip(inputArray[:-1], inputArray[1:]))

solution3([3, 6, -2, -5, 7, 3])

solution3([3, 6, 20, 15, 7, 3])

inputarray = [3, 6, -2, -5, 7, 3]

print(inputarray[:-1])
print(inputarray[1:])

#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================
#===============================================================================================================

"""Below we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n.

A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below.



Example

For n = 2, the output should be
solution(n) = 5;
For n = 3, the output should be
solution(n) = 13.
"""

